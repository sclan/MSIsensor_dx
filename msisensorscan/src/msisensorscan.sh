#!/bin/bash
# msisensorscan 0.0.1
# Generated by dx-app-wizard.
#
# Basic execution pattern: Your app will run on a single machine from
# beginning to end.
#
# Your job's input variables (if any) will be loaded as environment
# variables before this script runs.  Any array inputs will be loaded
# as bash arrays.
#
# Any code outside of main() (or any entry point you may add) is
# ALWAYS executed, followed by running the entry point itself.
#
# See https://wiki.dnanexus.com/Developer-Portal for tutorials on how
# to modify this file.

main() {

    echo "Value of ref: '$ref'"
    echo "Value of mo: '$mo'"
    echo "Value of cl: '$cl'"
    echo "Value of mah: '$mah'"
    echo "Value of mlm: '$mlm'"
    echo "Value of mrt: '$mrt'"
    echo "Value of ho: '$ho'"

    # The following line(s) use the dx command-line tool to download your file
    # inputs to the local file system using variable names for the filenames. To
    # recover the original filenames, you can use the output of "dx describe
    # "$variable" --name".

    dx download "$ref" -o ref

    # Fill in your application code here.
    #

    msisensor scan -d ref -l mo -c cl -m mah -s mlm -r mrt -p ho -o outp

    # To report any recognized errors in the correct format in
    # $HOME/job_error.json and exit this script, you can use the
    # dx-jobutil-report-error utility as follows:
    #
    #   dx-jobutil-report-error "My error message"
    #
    # Note however that this entire bash script is executed with -e
    # when running in the cloud, so any line which returns a nonzero
    # exit code will prematurely exit the script; if no error was
    # reported in the job_error.json file, then the failure reason
    # will be AppInternalError with a generic error message.

    # The following line(s) use the utility dx-jobutil-add-output to format and
    # add output variables to your job's output as appropriate for the output
    # class.  Run "dx-jobutil-add-output -h" for more information on what it
    # does.

#    for i in "${!outp[@]}"; do
#        dx-jobutil-add-output outp "${outp[$i]}" --class=array:file
#    done
    for file in $HOME/outp*; do
        fileid=`dx upload "$file" --brief --no-progress`
        dx-jobutil-add-output outp "$fileid" --class=array:file
    done
}
