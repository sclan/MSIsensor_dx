#!/bin/bash
# msisensormsi 0.0.1
# Generated by dx-app-wizard.
#
# Basic execution pattern: Your app will run on a single machine from
# beginning to end.
#
# Your job's input variables (if any) will be loaded as environment
# variables before this script runs.  Any array inputs will be loaded
# as bash arrays.
#
# Any code outside of main() (or any entry point you may add) is
# ALWAYS executed, followed by running the entry point itself.
#
# See https://wiki.dnanexus.com/Developer-Portal for tutorials on how
# to modify this file.
set -e -x -o pipefail

main() {

    echo "Value of i_mi: '$i_mi'"
    echo "Value of i_nom: '$i_nom'"
    echo "Value of i_nom_i: '$i_nom_i'"
    echo "Value of i_tum: '$i_tum'"
    echo "Value of i_tum_i: '$i_tum_i'"
    echo "Value of i_bed: '$i_bed'"
    echo "Value of fdr: '$fdr'"
    echo "Value of m_com: '$m_com'"
    echo "Value of cov: '$cov'"
    echo "Value of cov_n: '$cov_n'"
#    echo "Value of m_h: '$m_h'"
#    echo "Value of m_h_d: '$m_h_d'"
#    echo "Value of ma_h_d: '$ma_h_d'"
#    echo "Value of m_s: '$m_s'"
#    echo "Value of m_s_d: '$m_s_d'"
#    echo "Value of ma_s_d: '$ma_s_d'"
    echo "Value of s_s: '$s_s'"
    echo "Value of t_num: '$t_num'"
    echo "Value of only_ho: '$only_ho'"
    echo "Value of only_mi: '$only_mi'"

# arguments above that were commented out because of issue #38
# https://github.com/ding-lab/msisensor/issues/38

    # The following line(s) use the dx command-line tool to download your file
    # inputs to the local file system using variable names for the filenames. To
    # recover the original filenames, you can use the output of "dx describe
    # "$variable" --name".

    dx download "$i_mi" -o i_mi

    dx download "$i_nom" -o i_nom.bam
    dx download "$i_nom_i" -o i_nom.bam.bai

    dx download "$i_tum" -o i_tum.bam
    dx download "$i_tum_i" -o i_tum.bam.bai

    if [ -n "$i_bed" ]
    then
        dx download "$i_bed" -o i_bed.bed
    fi

    # Fill in your application code here.
    #

    # error 1:  "Same reference genome file should be used in both 'msisensor scan' and 'msisensor msi' steps!!!"
    # I noticed that the issue occurs when any of these arguments are specified: -m50 -q3 -s5 -w40
    # msisensor msi -d i_mi -n i_nom.bam -t i_tum.bam -e i_bed.bed -f fdr -i m_com -c cov -z cov_n -l m_h -p m_h_d -m ma_h_d -q m_s -s m_s_d -w ma_s_d -u s_s -b t_num -o output

    # so those arguments are gone
     
    msisensor msi -d i_mi -n i_nom.bam -t i_tum.bam -e i_bed.bed -f fdr -i m_com -c cov -z cov_n -u s_s -b t_num -o output


    # To report any recognized errors in the correct format in
    # $HOME/job_error.json and exit this script, you can use the
    # dx-jobutil-report-error utility as follows:
    #
    #   dx-jobutil-report-error "My error message"
    #
    # Note however that this entire bash script is executed with -e
    # when running in the cloud, so any line which returns a nonzero
    # exit code will prematurely exit the script; if no error was
    # reported in the job_error.json file, then the failure reason
    # will be AppInternalError with a generic error message.

    # The following line(s) use the utility dx-jobutil-add-output to format and
    # add output variables to your job's output as appropriate for the output
    # class.  Run "dx-jobutil-add-output -h" for more information on what it
    # does.

    for file in $HOME/output*; do
        fileid=`dx upload "$file" --brief --no-progress`
        dx-jobutil-add-output output "$fileid" --class=array:file
    done
}
